<?php

namespace zaboy\test\rest\Pipes\Factory;

use zaboy\rest\Pipes\Factory\RestPipeFactory;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-29 at 18:23:51.
 */
class RestPipeFactoryTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var zaboy\rest\Pipes\Factory\RestPipeFactory
     */
    protected $object;
    
    /**
     * @var Zend\Db\Adapter\Adapter
     */
    protected $adapter;   
    
    /**
     * @var ContainerInterface
     */
    protected $container;   
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->container = include './config/container.php';
        $this->object = new RestPipeFactory();
        $this->adapter = $this->container->get('db');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /*
     * @see test.global.php
     */
    public function testDbTableStoresAbstractFactory__canCreateIfConfigAbsent() {
        $requestedName = 'resource_name';
        $this->setExpectedException('\zaboy\rest\RestException');  
        $result = $this->object->__invoke($this->container, $requestedName);
    }


    /*
     * @see test.global.php'tablle_with_name_same_as_resource_name'
     */
    public function testDbTableStoresAbstractFactory__canCreateIfTableExist() {
        $tableName = 'table_with_name_same_as_resource_name';
        $createStatementStr = "CREATE TABLE IF NOT EXISTS $tableName (id INT)";
        $createStatement = $this->adapter->query($createStatementStr);
        $createStatement->execute();
        $result = $this->object->__invoke($this->container, $tableName); 
        var_dump($result);
        $this->assertSame(
                true,
                $result  instanceof \Zend\Stratigility\MiddlewareInterface
        );
        $deleteStatementStr = "DROP TABLE IF EXISTS " .  $tableName;
        $deleteStatement = $this->adapter->query($deleteStatementStr);
        $deleteStatement->execute();
        
    }

    
    
    /*
     * @see test.global.php
     */
    public function testDbTableStoresAbstractFactory__canCreateIfDataStorInConfigExist() {
        $tableName = 'table_for_db_data_store';
        $createStatementStr = "CREATE TABLE IF NOT EXISTS $tableName (id INT)";
        $createStatement = $this->adapter->query($createStatementStr);
        $createStatement->execute();
        $result = $this->object->__invoke($this->container, 'test_DataStoreDbTableWithNameAsResourceName'); 
        var_dump($result);
        $this->assertSame(
                true,
                $result  instanceof \Zend\Stratigility\MiddlewareInterface
        );
        $deleteStatementStr = "DROP TABLE IF EXISTS " .  $tableName;
        $deleteStatement = $this->adapter->query($deleteStatementStr);
        $deleteStatement->execute();
    }    

    /*
     * @see test.global.php
     */
    public function testDbTableStoresAbstractFactory__canCreateIfMiddlewareInConfigExist() {
        $result = $this->object->__invoke($this->container, 'test_MiddlewareWithNameAsResourceName'); 
        var_dump($result);
        $this->assertSame(
                true,
                $result  instanceof \Zend\Stratigility\MiddlewareInterface
        );
    }    
}
