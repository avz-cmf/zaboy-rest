<?php

/**
 * Zaboy lib (http://zaboy.org/lib/)
 *
 * @copyright  Zaboychenko Andrey
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 */

namespace zaboy\test\res\Queue\DataStore;

use zaboy\rest\Queue\DataStore\Queues;
use Xiag\Rql\Parser\Node\Query\ScalarOperator;
use Xiag\Rql\Parser\Query;
use Xiag\Rql\Parser\Node;
use Xiag\Rql\Parser\DataType\Glob;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-08-25 at 15:44:45.
 */
class QueuesTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var DbTable
     */
    protected $object;

    /**
     *
     * @var array
     */
    protected $_itemsArrayDelault = array(
        array('id' => 'Queue10'),
        array('id' => 'Queue21'),
        array('id' => 'Queue22'),
        array('id' => 'Queue32')
    );

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Queues();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

// **************************** Identifier ************************

    public function testSetIdentifier()
    {
        $this->assertEquals(
                'id', $this->object->getIdentifier()
        );
    }

// *************************** Item **************************************************
    public function testRead_Empty()
    {

        $this->assertNull(
                $this->object->read('AbsentName')
        );
    }

    public function testCreateAbsentAndRead()
    {
        $this->object->deleteAll();
        $newItem = $this->object->create(['id' => 'Queue_Name']);
        $this->assertEquals(
                ['id' => 'Queue_Name'], $this->object->read('Queue_Name')
        );
    }

    public function testCreatePresent_Rewrite()
    {
        $this->object->deleteAll();
        $newItem = $this->object->create(['id' => 'Queue_Name']);
        $this->assertEquals(
                ['id' => 'Queue_Name'], $this->object->read('Queue_Name')
        );
        $newItem = $this->object->create(['id' => 'Queue_Name'], true);
        $this->assertEquals(
                ['id' => 'Queue_Name'], $this->object->read('Queue_Name')
        );
    }

    public function testCreatePresent_RewriteRestrict()
    {
        $this->object->deleteAll();
        $newItem = $this->object->create(['id' => 'Queue_Name']);
        $this->assertEquals(
                ['id' => 'Queue_Name'], $this->object->read('Queue_Name')
        );
        $this->setExpectedException('\zaboy\rest\DataStore\DataStoreException');
        $newItem = $this->object->create(['id' => 'Queue_Name']);
    }

    public function testCreate_withoutId()
    {
        $this->setExpectedException('\zaboy\rest\DataStore\DataStoreException');
        $newItem = $this->object->create(['idAnother' => 'Queue_Name']);
    }

    public function testUpdate()
    {
        $this->object->deleteAll();
        $newItem = $this->object->create(['id' => 'Queue_Name']);
        $this->setExpectedException('\zaboy\rest\DataStore\DataStoreException');
        $newItem = $this->object->update(['id' => 'Queue_Name']);
    }

    public function testHas()
    {
        $this->object->deleteAll();
        $newItem = $this->object->create(['id' => 'Queue_Name']);
        $this->assertFalse(
                $this->object->Has('Queue_Name_Absent')
        );
        $this->assertTrue(
                $this->object->Has('Queue_Name')
        );
    }

    public function testCountAndDeleteAll()
    {
        $this->object->deleteAll();
        $this->assertEquals(
                0, $this->object->count()
        );
        foreach ($this->_itemsArrayDelault as $value) {
            $this->object->create($value);
        }
        $this->assertEquals(
                4, $this->object->count()
        );
    }

    public function testDelete_withtId()
    {
        $this->object->deleteAll();
        $newItem = $this->object->create(['id' => 'Queue_Name']);
        $count = $this->object->delete('Queue_Name');
        $this->assertEquals(
                1, $count
        );
    }

    public function testDelete_withtId_WhichAbsent()
    {
        $this->object->deleteAll();
        $newItem = $this->object->create(['id' => 'Queue_Name']);
        $count = $this->object->delete('Queue_Name_Absent');
        $this->assertEquals(
                0, $count
        );
    }

    public function testIteratorInterfaceStepToStep()
    {
        $this->object->deleteAll();
        foreach ($this->_itemsArrayDelault as $value) {
            $this->object->create($value);
        }
        $i = 0;
        foreach ($this->object as $key => $value) {
            $i = $i + 1;
            $this->assertEquals($value, $this->object->read($key));
            $this->assertEquals(
                    $this->_itemsArrayDelault[$i - 1], $value
            );

            unset($this->_itemsArrayDelault[$i - 1]);
        }
        $this->assertEquals(
                $i, $this->object->count()
        );
        $this->assertEmpty($this->_itemsArrayDelault);
    }

    //************************** RQL ************************
    public function test_QueryEq()
    {
        $this->object->deleteAll();
        foreach ($this->_itemsArrayDelault as $value) {
            $this->object->create($value);
        }
        $query = new Query();
        $eqNode = new ScalarOperator\EqNode(
                'id', 'Queue21'
        );
        $query->setQuery($eqNode);
        $this->assertEquals(
                $this->_itemsArrayDelault[1], $this->object->query($query)[0]
        );
    }

    public function test_QueryNe()
    {
        $this->object->deleteAll();
        foreach ($this->_itemsArrayDelault as $value) {
            $this->object->create($value);
        }
        $query = new Query();
        $neNode = new ScalarOperator\NeNode(
                'id', 'Queue21'
        );
        $query->setQuery($neNode);

        $this->assertEquals(
                3, count($this->object->query($query))
        );
    }

    public function testQuery_Empty()
    {
        $this->object->deleteAll();
        foreach ($this->_itemsArrayDelault as $value) {
            $this->object->create($value);
        }
        $query = new Query();
        $eqNode = new ScalarOperator\EqNode(
                'id', 'not_exist_value'
        );
        $query->setQuery($eqNode);
        $this->assertEquals(
                [], $this->object->query($query)
        );
    }

    public function testQuery_all()
    {
        $this->object->deleteAll();
        foreach ($this->_itemsArrayDelault as $value) {
            $this->object->create($value);
        }
        $query = new Query();
        $queryArray = $this->object->query($query);
        for ($index = 0; $index < count($this->_itemsArrayDelault); $index++) {
            $this->assertEquals(
                    array_pop($this->_itemsArrayDelault), array_pop($queryArray)
            );
        }
    }

    public function testQuery_orderId()
    {
        $this->object->deleteAll();
        foreach ($this->_itemsArrayDelault as $value) {
            $this->object->create($value);
        }
        $query = new Query();
        $sortNode = new Node\SortNode(['id' => '-1']);
        $query->setSort($sortNode);
        $queryArray = $this->object->query($query);
        $this->assertEquals(
                array_pop($this->_itemsArrayDelault), array_shift($queryArray)
        );
        $this->assertEquals(
                array_pop($this->_itemsArrayDelault), array_shift($queryArray)
        );
        $this->assertEquals(
                array_pop($this->_itemsArrayDelault), array_shift($queryArray)
        );
    }

    public function testQuery_limitCombo()
    {
        $this->object->deleteAll();
        foreach ($this->_itemsArrayDelault as $value) {
            $this->object->create($value);
        }
        $query = new Query();
        $sortNode = new Node\SortNode(['id' => -1]);
        $query->setSort($sortNode);
        $limitNode = new Node\LimitNode(1, 1);
        $query->setLimit($limitNode);
        $queryArray = $this->object->query($query);
        $this->assertEquals(
                [ 'id' => 'Queue22'], $queryArray[1 - 1]
        );
        $this->assertEquals(
                1, count($queryArray)
        );
    }

    public function provider_Query_Where_Like_True()
    {
        return array(
            array('*e10', 1, 1),
            array('*1*', 1, 2),
            array('*2*', 2, 3),
            array('Queue21', 2, 1),
            array('Queue2?', 2, 2),
        );
    }

    /**
     * @dataProvider provider_Query_Where_Like_True
     */
    public function testQuery_Where_Like_True($globString, $arrayDelaultKeys, $count)
    {
        $this->object->deleteAll();
        foreach ($this->_itemsArrayDelault as $value) {
            $this->object->create($value);
        }
        $query = new Query();
        $likeNode = new ScalarOperator\LikeNode(
                'id', new Glob($globString)
        );
        $query->setQuery($likeNode);
        $queryArray = $this->object->query($query);
        $this->assertEquals(
                $this->_itemsArrayDelault[$arrayDelaultKeys - 1], $queryArray[1 - 1]
        );
        $this->assertEquals(
                $count, count($queryArray)
        );
    }

}
