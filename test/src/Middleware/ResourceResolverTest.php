<?php

namespace zaboy\test\rest\Middleware;

use zaboy\rest\Middleware\ResourceResolver;
use Zend\Diactoros\Response;
use Zend\Diactoros\ServerRequest;
use zaboy\res\DataStore\Memory;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-29 at 18:23:51.
 */
class ResourceResolverTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Returner
     */
    protected $object;
    
    /*
     * @var Zend\Diactoros\Response
     */
    protected $response;
    
    /*
     * @var Zend\Diactoros\ServerRequest;
     */
    protected $request;
    
    /*
     * @var \Callable
     */
    protected $next;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new ResourceResolver();
        $this->response = new Response();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testResourceResolver__invokeResourceName1() {
        $this->request = new ServerRequest([], [], '/foo');
        $this->next = function ($req, $resp) {
            return $req;
        };
        $returnedResponse = $this->object
                ->__invoke($this->request, $this->response, $this->next);        
        $this->assertSame(
                $returnedResponse->getAttribute('Resource-Name'),
                'foo'
        );
        $this->assertSame(
                $returnedResponse->getAttribute('Primary-Key-Value'),
                null
        );  
    }

    public function testResourceResolver__invokeResourceName2() {
        $this->request = new ServerRequest([], [], '/foo-bar_baz/2');
        $this->next = function ($req, $resp) {
            return $req;
        };
        $returnedResponse = $this->object
                ->__invoke($this->request, $this->response, $this->next);        
        $this->assertSame(
                $returnedResponse->getAttribute('Resource-Name'),
                'foo-bar_baz'
        );
        $this->assertSame(
                $returnedResponse->getAttribute('Primary-Key-Value'),
                '2'
        );  
    }
    

    public function testResourceResolver__invokeResourceName3() {
        $this->request = new ServerRequest([], [], '/1foo-AbarD_baz3/a-b_C2?A=2&bd=cd');
        $this->next = function ($req, $resp) {
            return $req;
        };
        $returnedResponse = $this->object
                ->__invoke($this->request, $this->response, $this->next);        
        $this->assertSame(
                $returnedResponse->getAttribute('Resource-Name'),
                '1foo-AbarD_baz3'
        );
        $this->assertSame(
                $returnedResponse->getAttribute('Primary-Key-Value'),
                'a-b_C2'
        );  
    }

    public function testResourceResolver__invokeResourceName4() {
        $this->request = new ServerRequest([], [], '/123?A=2&bd=cd');
        $this->next = function ($req, $resp) {
            return $req;
        };
        $returnedResponse = $this->object
                ->__invoke($this->request, $this->response, $this->next);        
        $this->assertSame(
                $returnedResponse->getAttribute('Resource-Name'),
                '123'
        );
        $this->assertSame(
                $returnedResponse->getAttribute('Primary-Key-Value'),
                null
        );  
    }

    public function testResourceResolver__invokeResourceName5() {
        $this->request = new ServerRequest([], [], '/');
        $this->next = function ($req, $resp) {
            return $req;
        };
        $returnedResponse = $this->object
                ->__invoke($this->request, $this->response, $this->next);        
        $this->assertSame(
                $returnedResponse->getAttribute('Resource-Name'),
                null
        );
        $this->assertSame(
                $returnedResponse->getAttribute('Primary-Key-Value'),
                null
        );  
    }
    
}
