<?php

/**
 * Zaboy lib (http://zaboy.org/lib/)
 *
 * @copyright  Zaboychenko Andrey
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 */

namespace zaboy\test\rest\DataStore\Eav;

use Xiag\Rql\Parser\Node\Query\LogicOperator\AndNode;
use Xiag\Rql\Parser\Node\Query\ScalarOperator\EqNode;
use Xiag\Rql\Parser\Node\Query\ScalarOperator\GtNode;
use Xiag\Rql\Parser\Node\Query\ScalarOperator\LtNode;
use Xiag\Rql\Parser\Node\Query\ScalarOperator\NeNode;
use Xiag\Rql\Parser\Node\SelectNode;
use Xiag\Rql\Parser\Node\SortNode;
use Xiag\Rql\Parser\Query;
use zaboy\rest\DataStore\Eav\Example\StoreCatalog;
use zaboy\rest\DataStore\Eav\SuperEntity;
use zaboy\rest\DataStore\Eav\SysEntities;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-11 at 16:19:25.
 */
class SuperEntityTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var SuperEntity
     */
    protected $object;

    /** @var  ContainerInterface */
    protected $container;

    protected function setUp()
    {
        $this->container = include 'config/container.php';
        $sysEntities = $this->container->get(SysEntities::TABLE_NAME);
        $sysEntities->deleteAll();
    }



    public function provider_supertEntityGetSql(){
        $query1 = new Query();
        $query2 = new Query();
        $query2->setQuery(
            new AndNode([
                new LtNode('price', 23),
                new NeNode('icon', 'icon1.jpg'),
            ])
        );
        $query3 = new Query();
        $query3->setSelect(new SelectNode(['price', 'icon']));
        $query4 = new Query();
            $query4->setSort(new SortNode(['price' => -1, 'icon' => +1]));
        return array(
            array(
                'SELECT `sys_entities`.*, `entity_product`.*, `entity_mainicon`.* FROM `sys_entities` ' .
                'INNER JOIN `entity_product` ON `entity_product`.`id`=`sys_entities`.`id` ' .
                'INNER JOIN `entity_mainicon` ON `entity_mainicon`.`id`=`entity_product`.`id` ' .
                'WHERE \'1\' = \'1\' ORDER BY `sys_entities`.`id` ASC',
                $query1
            ),
            array(
                'SELECT `sys_entities`.*, `entity_product`.*, `entity_mainicon`.* FROM `sys_entities` ' .
                'INNER JOIN `entity_product` ON `entity_product`.`id`=`sys_entities`.`id` ' .
                'INNER JOIN `entity_mainicon` ON `entity_mainicon`.`id`=`entity_product`.`id` ' .
                'WHERE ((`price`<\'23\') AND (`icon`<>\'icon1.jpg\')) ORDER BY `sys_entities`.`id` ASC',
                $query2
            ),
            array(
                'SELECT `entity_product`.`price` AS `price`, `entity_mainicon`.`icon` AS `icon` FROM `sys_entities` ' .
                'INNER JOIN `entity_product` ON `entity_product`.`id`=`sys_entities`.`id` ' .
                'INNER JOIN `entity_mainicon` ON `entity_mainicon`.`id`=`entity_product`.`id` ' .
                'WHERE \'1\' = \'1\' ORDER BY `sys_entities`.`id` ASC',
                $query3
            ),
            array(
                'SELECT `sys_entities`.*, `entity_product`.*, `entity_mainicon`.* FROM `sys_entities` ' .
                'INNER JOIN `entity_product` ON `entity_product`.`id`=`sys_entities`.`id` ' .
                'INNER JOIN `entity_mainicon` ON `entity_mainicon`.`id`=`entity_product`.`id` ' .
                'WHERE \'1\' = \'1\' ORDER BY `sys_entities`.`price` DESC, `sys_entities`.`icon` ASC',
                $query4
            )
        );
    }

    /**
     * @dataProvider  provider_supertEntityGetSql
     * @param $sql
     * @param Query $query
     */
    public function test__supertEntityGetSql($sql, Query $query)
    {
        $this->object = $this->container->get(StoreCatalog::PRODUCT_TABLE_NAME . SuperEntity::INNER_JOIN . StoreCatalog::MAINICON_TABLE_NAME);
        $this->assertEquals($sql, $this->object->getSqlQuery($query));
    }


    public function test__createEntity(){
        $this->object = $this->container->get(StoreCatalog::PRODUCT_TABLE_NAME . SuperEntity::INNER_JOIN . StoreCatalog::MAINICON_TABLE_NAME);
        $insertedObject = [
            'title' => 'Plate4-mainicon',
            'price' => '24',
            'icon' => 'icon4.jpg'
        ];
        $newItem = $this->object->create($insertedObject);

        $unset = array_diff(array_keys($newItem), array_keys($insertedObject));

        foreach ($unset as $key) {
            unset($newItem[$key]);
        }
        $this->assertEquals($insertedObject, $newItem);
    }

}
